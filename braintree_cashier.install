<?php

/**
 * @file
 * Install, update and uninstall functions for the Braintree Cashier module.
 */

use Drupal\braintree_cashier\Entity\Subscription;

/**
 * Add the setting to display the coupon field.
 */
function braintree_cashier_update_8201() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('braintree_cashier.settings');
  $config->set('enable_coupon_field', 1);
  $config->save(TRUE);
}

/**
 * Populate the new date fields for existing Braintree managed subscriptions.
 */
function braintree_cashier_update_8202() {
  $environment = \Drupal::config('braintree_api.settings')->get('environment');

  $billing_plan_ids = \Drupal::entityQuery('billing_plan')
    ->condition('environment', $environment)
    ->execute();

  $subscription_ids = \Drupal::entityQuery('subscription')
    ->exists('braintree_subscription_id')
    ->condition('billing_plan.target_id', $billing_plan_ids, 'IN')
    ->execute();

  $queue = \Drupal::queue('populate_subscription_date_fields');
  foreach ($subscription_ids as $subscription_id) {
    $queue->createItem($subscription_id);
  }
}

/**
 * Fix free trial dates for subscriptions that did not start with a free trial.
 *
 * This occurs despite a free trial containing Billing Plan when a user has
 * already had a free trial.
 */
function braintree_cashier_update_8203() {

  $environment = \Drupal::config('braintree_api.settings')->get('environment');

  $billing_plan_ids = \Drupal::entityQuery('billing_plan')
    ->condition('environment', $environment)
    ->condition('has_free_trial', TRUE)
    ->execute();

  if (!empty($billing_plan_ids)) {
    $subscription_ids = \Drupal::entityQuery('subscription')
      ->exists('braintree_subscription_id')
      ->condition('billing_plan.target_id', $billing_plan_ids, 'IN')
      ->execute();

    $subscriptions = Subscription::loadMultiple($subscription_ids);
    foreach ($subscriptions as $subscription) {
      /* @var $subscription \Drupal\braintree_cashier\Entity\SubscriptionInterface */
      if (!empty($subscription->getTrialStartDate()) && !empty($subscription->getTrialEndDate()) && ($subscription->getTrialEndDate() < $subscription->getTrialStartDate())) {
        $subscription->set('trial_start_date', NULL);
        $subscription->set('trial_end_date', NULL);
        $subscription->save();
      }
    }
  }
}

/**
 * Rebuild routes due to new /admin prefix.
 */
function braintree_cashier_update_8204() {
  \Drupal::service("router.builder")->rebuild();
}

/**
 * Replace the Period End Date timestamp field with a new Date type field.
 */
function braintree_cashier_update_8205() {
  // Store the old period end dates, deleting the field values along the way.
  // The key => value is subscription_entity_id => period_end_date timestamp.
  /** @var \Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface $key_val */
  $key_val = \Drupal::keyValueExpirable('period_end_date');
  $ten_days = 864000;

  $subscription_ids = \Drupal::entityTypeManager()
    ->getStorage('subscription')
    ->getQuery()
    ->execute();

  $subscriptions = Subscription::loadMultiple($subscription_ids);

  /** @var \Drupal\braintree_cashier\Entity\Subscription $subscription */
  foreach ($subscriptions as $subscription) {
    // The class get/set methods can't be used since they now expect a Date
    // type field, whereas the field will currently be of the old timestamp
    // type.
    $key_val->setWithExpire($subscription->id(), $subscription->get('period_end_date')->value, $ten_days);
    $subscription->set('period_end_date', NULL);
    $subscription->save();
  }

  /** @var \Drupal\Core\Extension\ModuleHandlerInterface $module_handler */
  $module_handler = \Drupal::service('module_handler');
  if (!$module_handler->moduleExists('datetime')) {
    /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
    $module_installer = \Drupal::service('module_installer');
    $module_installer->install('datetime');
  }

  \Drupal::entityDefinitionUpdateManager()->applyUpdates();

  // Re-populate period_end_date field with data.
  // Reload subscriptions to ensure the latest version.
  \Drupal::entityTypeManager()->getStorage('subscription')->resetCache();
  $subscriptions = Subscription::loadMultiple($subscription_ids);
  foreach ($subscriptions as $subscription) {
    if ($timestamp = $key_val->get($subscription->id())) {
      $subscription->setPeriodEndDate($timestamp);
      $subscription->save();
    }
  }
}
